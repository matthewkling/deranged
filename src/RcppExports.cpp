// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// disperse
arma::mat disperse(arma::mat S, arma::mat N, arma::ivec ind, bool reflect, bool rand, int seed);
RcppExport SEXP _stranger_disperse(SEXP SSEXP, SEXP NSEXP, SEXP indSEXP, SEXP reflectSEXP, SEXP randSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ind(indSEXP);
    Rcpp::traits::input_parameter< bool >::type reflect(reflectSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(disperse(S, N, ind, reflect, rand, seed));
    return rcpp_result_gen;
END_RCPP
}
// transition
arma::cube transition(arma::cube N, arma::cube E, arma::mat alpha, arma::cube beta, arma::cube gamma, bool rand, int seed);
RcppExport SEXP _stranger_transition(SEXP NSEXP, SEXP ESEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP randSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(transition(N, E, alpha, beta, gamma, rand, seed));
    return rcpp_result_gen;
END_RCPP
}
// reproduce
arma::mat reproduce(arma::cube N, arma::vec f);
RcppExport SEXP _stranger_reproduce(SEXP NSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(reproduce(N, f));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stranger_disperse", (DL_FUNC) &_stranger_disperse, 6},
    {"_stranger_transition", (DL_FUNC) &_stranger_transition, 7},
    {"_stranger_reproduce", (DL_FUNC) &_stranger_reproduce, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_stranger(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
