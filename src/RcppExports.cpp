// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// transition
arma::cube transition(arma::cube N, arma::cube E, arma::mat alpha, arma::cube beta, arma::cube gamma, bool rand, int seed);
RcppExport SEXP _deranged_transition(SEXP NSEXP, SEXP ESEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP randSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(transition(N, E, alpha, beta, gamma, rand, seed));
    return rcpp_result_gen;
END_RCPP
}
// reproduce
arma::mat reproduce(arma::cube N, arma::vec f);
RcppExport SEXP _deranged_reproduce(SEXP NSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(reproduce(N, f));
    return rcpp_result_gen;
END_RCPP
}
// disperse
arma::mat disperse(arma::mat S, arma::mat N, bool reflect, bool rand, int seed);
RcppExport SEXP _deranged_disperse(SEXP SSEXP, SEXP NSEXP, SEXP reflectSEXP, SEXP randSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type reflect(reflectSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(disperse(S, N, reflect, rand, seed));
    return rcpp_result_gen;
END_RCPP
}
// sim
arma::cube sim(arma::cube N, arma::field<arma::cube> env, arma::mat alpha, arma::cube beta, arma::cube gamma, arma::vec fecundity, arma::mat nb, bool reflect, bool rand, int seed, int record, arma::uword nsteps);
RcppExport SEXP _deranged_sim(SEXP NSEXP, SEXP envSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP fecunditySEXP, SEXP nbSEXP, SEXP reflectSEXP, SEXP randSEXP, SEXP seedSEXP, SEXP recordSEXP, SEXP nstepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type env(envSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fecundity(fecunditySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< bool >::type reflect(reflectSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type record(recordSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nsteps(nstepsSEXP);
    rcpp_result_gen = Rcpp::wrap(sim(N, env, alpha, beta, gamma, fecundity, nb, reflect, rand, seed, record, nsteps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_deranged_transition", (DL_FUNC) &_deranged_transition, 7},
    {"_deranged_reproduce", (DL_FUNC) &_deranged_reproduce, 2},
    {"_deranged_disperse", (DL_FUNC) &_deranged_disperse, 5},
    {"_deranged_sim", (DL_FUNC) &_deranged_sim, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_deranged(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
